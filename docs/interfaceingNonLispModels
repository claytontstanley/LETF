In order to interface a non-lisp model, you must [1] launch your model from the command line, [2] accept model inputs on standard input (stdin), and [3] print model outputs to standard output (stdout).

For example, suppose you have a model that has two independent variables (IVs) and two dependent variables (DVs). First, generate a 'work file' that has a row for each set of independent variables that you want to run.

For this example:
$ cat workFile.txt 
11 1
2 1
3 1
4 1
5 2
6 3
7 2

This workfile says that you want to run a model with two IVs through a set of 7 different IV runs. 

Next, configure your model. It needs to accept IV values on standard input, execute the model for each IV set, and for each IV set, output the dependent variable values to stdout.

Each DV outputted should be printed to stdout in the form: "[DVName]=[DVVAL]\n". That is, the name of the DV, and equal sign, the DV's value, and then a newline character.

For this example, here's a python model (pythonModel.py):

//////////////////

#!/usr/bin/python

import sys

def doWork(line):
        inputVariables=line.strip().split()
        IV1=inputVariables[0]
        IV2=inputVariables[1]
        print "line" + "=" + line
        print "finished" + "=" + "1"

while True:
        line=sys.stdin.readline().strip()
        if len(line) == 0:
                break
        doWork(line)


//////////////////

To execute the model, launch the model from the command line, and get standard input from the workfile, like this:

Java model:
$ python pythonModel.py < workFile.txt  
line=11 1
finished=1
line=2 1
finished=1
line=3 1
finished=1
line=4 1
finished=1
line=5 2
finished=1
line=6 3
finished=1
line=7 2
finished=1



