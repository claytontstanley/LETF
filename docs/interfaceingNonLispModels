In order to interface a non-lisp model, you must [1] launch your model from the command line, [2] accept model inputs on standard input (stdin), and [3] print model outputs to standard output (stdout).

For example, suppose you have a model that has two independent variables (IVs) and two dependent variables (DVs). First, generate a 'work file' that has a row for each set of independent variables that you want to run. Each row should be in JSON IV-name IV-val format:

For this example:
$ cat workfile.txt 
{"IV1":1,"IV2":1}
{"IV1":2,"IV2":1}
{"IV1":3,"IV2":1}
{"IV1":4,"IV2":1}
{"IV1":5,"IV2":2}
{"IV1":6,"IV2":3}
{"IV1":7,"IV2":2}


This workfile says that you want to run a model with two IVs through a set of 7 different IV runs. 

Next, configure your model. It needs to accept IV values on standard input, execute the model for each IV set, and for each IV set, output the dependent variable values to stdout.

Each DV outputted should be printed to stdout in the form: "[DVName]=[DVVAL]\n". That is, the name of the DV, and equal sign, the DV's value, and then a newline character.

For this example, here's a python model (pythonModel.py):

//////////////////

#!/usr/bin/python

import sys
import json

def doWork(line):
        IVStr = json.loads(line)
        print 'IVStr=' + str(IVStr) # For general info and debugging only; not required for interfacing
        for key, value in IVStr.iteritems():
                exec( key + '=' + str(value) )
        DV1 = IV1 * IV1 + IV2 * IV2
        DV2 = IV1 + IV2
        print "DV1" + "=" + str(DV1)
        print "DV2" + "=" + str(DV2)

while True:
        line=sys.stdin.readline().strip()
        if len(line) == 0:
                break
        doWork(line)

//////////////////

To execute the model, launch the model from the command line, and get standard input from the workfile, like this:

Python model:
$ python model.py < workfile.txt 
IVStr={u'IV1': 1, u'IV2': 1}
DV1=2
DV2=2
IVStr={u'IV1': 2, u'IV2': 1}
DV1=5
DV2=3
IVStr={u'IV1': 3, u'IV2': 1}
DV1=10
DV2=4
IVStr={u'IV1': 4, u'IV2': 1}
DV1=17
DV2=5
IVStr={u'IV1': 5, u'IV2': 2}
DV1=29
DV2=7
IVStr={u'IV1': 6, u'IV2': 3}
DV1=45
DV2=9
IVStr={u'IV1': 7, u'IV2': 2}
DV1=53
DV2=9

Note that there is extraneous output (IVStr line), but that's OK. The system will filter the output and look for only what is needed. Also note that there doesn't need to be any sort of break statement between runs. The system will keep track of which DV vals map to which runs.
